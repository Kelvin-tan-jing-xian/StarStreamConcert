<link rel="stylesheet" href="/public/css/payment.css">
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">




<div class="container-fluid px-1 px-md-5 px-lg-1 px-xl-5 py-5 mx-auto">
    <div class="card card0 border-0">
        <div class="row d-flex">
            <div class="col-lg-6">
                <div class="card1 bg-light pb-5">
                    <div class="row px-3 justify-content-center mt-5 mb-2"> 
                        <img src="/{{content.venuePoster}}" class="image"> 
                    </div>
                    <div class="row px-3 text-center justify-content-center mb-2">
                        <h4>{{content.venueName}}</h4> 
                    </div>
                    <div class="row px-3 text-center justify-content-center mb-2">
                        <p class="text-wrap mr-5 ml-5">{{content.venueStory}}</p> 
                    </div>

                    <div class="row px-3 text-center d-flex justify-content-between mb-2 mr-5 ml-5">
                        <h5>Price:$</h5> 
                        <h5>{{content.venuePrice}} </h5> 
                    </div>
                </div>
                <br>

            </div>
            <div class="col-lg-6">
                <div class="card2 card border-0 px-4 py-5">
                    <form action="/venue/payment/{{content.uuid}}" method="post">
                        <div>
                            <label>&nbsp;Please choose your preferred venue date</label>
                            <br>
                            <input id="datepicker" width="200" name="venueDate" pattern="\d{1,4}-\d{1,2}-\d{1,2}" placeholder="yyyy-mm-dd"
                                onchange="return checkDate(venueDate)" required />
                            <label>&nbsp;Please choose your preferred venue time slot</label>
                            <br>
                            <select id="venueTime" name="venueTime">
                                <option value="10am ~ 1pm">10am ~ 1pm</option>
                                <option value="3pm ~ 6pm">3pm ~ 6pm</option>
                                <option value="7pm ~ 10pm">7pm ~ 10pm</option>
                                <option value="12pm ~ 3am">12pm ~ 3am</option>
                            </select>
                        </div>
                        <br>
                        <h1>NETS QR</h1>
                        <h1>Please enter the numeric amount to pay IN CENTS and then click submit</h1>
                        <input type="number" placeholder="Price x 100" name="amount" id="price" required>
                    
                        <button onclick="generate_qr_code(null)">Submit</button>
                        <img src="null" id="qr_code">
                        <br>
                        <button type="submit" onclick="show_alert()" class="btn btn-primary mt-3 mr-2">I have paid already using NETS QR</button>

                    </form>
                    <br>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    function show_alert() {
        alert("Thank you for your payment!");
    }
    /**
     * Make a request to generate the QR code
     * @param {InputEvent} event
     **/
    async function generate_qr_code(event) {
        // payment.mjs/generate route
        const response = await fetch("/payment/generate", {
            headers: {
                "Content-Type": "application/json"
            },
            method: "POST",
            body: JSON.stringify({
                amount: document.getElementById("price").value
            })
        });
        if (response.ok) {
            const content = await response.json();
            preview_qr_code(content.qr_code);

            //	Start auto ping
            setTimeout(ping_transaction_status, 1000, 0, content);
        }
    }

    /**
     * Displays the QR code
     * @param {string} qr_code
     **/
    function preview_qr_code(qr_code) {
        document.getElementById("qr_code").src = `data:image;base64,${qr_code}`;
    }

    /**
     * Make a HTTP request to query the generated transaction
     * @param {JSON}   transaction
     * @param {number} attempt
     **/
    async function ping_transaction_status(attempt, transaction) {

        if (attempt > 5)
            return void_transaction(transaction);

        try {
            const response = await fetch("/payment/query", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    txn_identifier: transaction.txn_identifier,
                    transaction_date: transaction.transaction_date,
                    transaction_time: transaction.transaction_time,
                    stan: transaction.stan,
                    amount: transaction.amount
                })
            });

            if (!response.ok) { throw new Error("Failed to query transaction"); }
            const content = await response.json();
            const status = content.status;

            switch (status) {
                case 0:
                    console.log(`Awaiting for payment: ${attempt}`);
                    return setTimeout(ping_transaction_status, 1000, attempt + 1, transaction);
                    break;

                case 1:
                    console.log(`Payment succeeded`);
                    break;

                case -1:
                    console.log(`Payment cancelled`);
                    // Hide qr code, set image to X
                    break;
            }
        }
        catch (error) {
            console.error(error);
            console.error(`Failed to ping transaction :${transaction.txn_identifier}`);
        }
    }


    async function void_transaction(transaction) {
        try {
            const response = await fetch("/payment/void", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    txn_identifier: transaction.txn_identifier,
                    transaction_date: transaction.transaction_date,
                    transaction_time: transaction.transaction_time,
                    stan: transaction.stan,
                    amount: transaction.amount
                })
            });

            if (!response.ok) { throw new Error("Failed to void transaction"); }
            const content = await response.json();
            const status = content.status;

            switch (status) {
                case 1:
                    console.log(`Transaction cancelled successfully`);
                    // TODO: Do any UX changes here
                    break;

                default:
                    console.log(`No action required`);
                    break;
            }
        }
        catch (error) {
            console.error(error);
            console.error(`Failed to void transaction :${transaction.txn_identifier}`);
        }
    }
    var dateToday = new Date();
    $('#datepicker').datepicker({
        format: 'yyyy-mm-dd',
        uiLibrary: 'bootstrap4',
        minDate: dateToday
    });


    function checkDate(form)
    {
        // regular expression to match required date format
        re = /^\d{1,2}\/\d{1,2}\/\d{4}$/;

        if(form.startdate.value != '' && !form.startdate.value.match(re)) {
            alert("Invalid date format: " + form.startdate.value);
        form.startdate.focus();
        return false;
        }
        alert("All input fields have been validated!");
        return true;
    }


</script>